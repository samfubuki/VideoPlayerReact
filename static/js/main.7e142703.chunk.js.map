{"version":3,"sources":["components/Home.js","components/CourseStructure.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","CourseStructure","props","courseName","match","params","coursename","useState","courses","setCourses","useEffect","playlistId","fetch","then","res","json","data","console","log","result","items","map","item","title","snippet","vid","contentDetails","videoId","uid","utit","counter","setCounter","length","className","url","width","height","controls","onEnded","localStorage","getItem","JSON","parse","setItem","stringify","index","key","onClick","includes","watched","class","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kQAeeA,MAbf,WACE,OACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,YACL,gDAEJ,kBAAC,IAAD,CAAMA,GAAG,WACL,iD,iCCyFKC,MA7Ff,SAAyBC,GAErB,IAAMC,EAAaD,EAAME,MAAMC,OAAOC,WAFV,EAGCC,mBAAS,IAHV,mBAGrBC,EAHqB,KAGbC,EAHa,KAK5BC,qBAAU,WACR,IAAIC,EAAa,GAEfA,EADe,WAAdR,EACY,qCAEC,qCAEhBS,MAAM,8GAAD,OAA+GD,EAA/G,iDACJE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,IAAMG,EAASH,EAAKI,MAAMC,KAAI,SAAAC,GAC5B,MAAO,CAACC,MAAMD,EAAKE,QAAQD,MAAME,IAAIH,EAAKI,eAAeC,YAE3DlB,EAAWU,GACXS,EAAIT,EAAO,GAAGM,KACdI,EAAKV,EAAO,GAAGI,YAEjB,IAvB0B,MAyBVhB,mBAAS,IAzBC,mBAyBrBkB,EAzBqB,KAyBjBG,EAzBiB,OA0BPrB,mBAAS,IA1BF,mBA0BrBgB,EA1BqB,KA0BfM,EA1Be,OA2BEtB,mBAAS,GA3BX,mBA2BrBuB,EA3BqB,KA2BZC,EA3BY,KA8D9B,OACE,oCACEvB,EAAQwB,OAAS,EACjB,6BA3BE,oCACA,4BAAKT,GACL,yBAAKU,UAAU,mBAEf,kBAAC,IAAD,CACEA,UAAU,eACVC,IAAG,0CAAqCT,GACxCU,MAAM,OACNC,OAAO,OACPC,UAAY,EACZC,QAAW,WACT,GAAGC,aAAaC,QAAQ,UAAU,CAC/B,IAAIxB,EAAOyB,KAAKC,MAAMH,aAAaC,QAAQ,WAC3CD,aAAaI,QAAQ,SAASF,KAAKG,UAAL,sBAAmB5B,GAAnB,CAAwBS,WAEvDc,aAAaI,QAAQ,SAASF,KAAKG,UAAU,CAACnB,UAcpD,wBAAIQ,UAAU,cAEZzB,EAAQa,KAAI,SAACC,EAAKuB,GAChB,OAAO,wBAAIC,IAAKxB,EAAKG,IAAKQ,UAAaH,IAAUe,EAAQ,yBAA2B,kBAAmBE,QAAS,WAC9GnB,EAAIN,EAAKG,KACTI,EAAKP,EAAKC,OACVQ,EAAWc,KAETvB,EAAKC,MA/CD,SAACE,GACf,SAAGc,aAAaC,QAAQ,YACnBC,KAAKC,MAAMH,aAAaC,QAAQ,WAAWQ,SAASvB,IA+C9CwB,CAAQ3B,EAAKG,MAAQ,uBAAGyB,MAAM,uBAAT,eAUhC,yCC5ESC,MAXf,WACE,OACE,yBAAKlB,UAAU,OACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAIC,UAAavD,IACnC,kBAAC,IAAD,CAAOsD,KAAK,eAAeC,UAAarD,OCE3BsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStD,MACvB,2DCZNuD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.7e142703.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <Link to=\"/reactjs\">\r\n          <h1>React JS Course</h1>\r\n      </Link>\r\n      <Link to=\"/nodejs\">\r\n          <h1>Node JS Course</h1>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React,{useState,useEffect} from 'react';\r\nimport ReactPlayer from 'react-player'\r\n\r\n//https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails%2Csnippet&maxResults=10&playlistId=PLB97yPrFwo5hpOay4v2nnDuUCZQMwyQzF&key=AIzaSyCK7T32d7bLwv0iaT04isK8CYGp9LCGL7w\r\n\r\nfunction CourseStructure(props) {\r\n\r\n    const courseName = props.match.params.coursename\r\n    const [courses,setCourses] = useState([])\r\n\r\n    useEffect(() => {\r\n      let playlistId = \"\"\r\n      if(courseName == \"reactjs\"){\r\n        playlistId = \"PLB97yPrFwo5hpOay4v2nnDuUCZQMwyQzF\"\r\n      }else{\r\n        playlistId =  \"PLB97yPrFwo5gh4WP-VtwsVJbebyHbxNk6\"      \r\n      }\r\n      fetch(`https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails%2Csnippet&maxResults=10&playlistId=${playlistId}&key=AIzaSyCK7T32d7bLwv0iaT04isK8CYGp9LCGL7w`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        const result = data.items.map(item => {\r\n          return {title:item.snippet.title,vid:item.contentDetails.videoId}\r\n        })\r\n        setCourses(result)\r\n        uid(result[0].vid)\r\n        utit(result[0].title)\r\n      })\r\n    },[])\r\n   \r\n    const [vid,uid] = useState(\"\")\r\n    const [title,utit] = useState(\"\")\r\n    const [counter, setCounter] = useState(0)\r\n    const watched = (vid) => {\r\n      if(localStorage.getItem(\"saveID\")){\r\n        if(JSON.parse(localStorage.getItem(\"saveID\")).includes(vid)){\r\n          return true\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n    const renderVideo = () => {\r\n      return (\r\n        <>\r\n        <h1>{title}</h1>\r\n        <div className=\"video-container\">\r\n        {/*<iframe width=\"853\" height=\"480\" src={\"//www.youtube.com/embed/\"+vid+\"?rel=0\"} frameBorder=\"0\" allowFullScreen></iframe>*/}\r\n        <ReactPlayer\r\n          className='react-player'\r\n          url={`https://www.youtube.com/watch?v=${vid}`}\r\n          width='100%'\r\n          height='100%'\r\n          controls = {true}\r\n          onEnded = {() => {\r\n            if(localStorage.getItem(\"saveID\")){\r\n               let data = JSON.parse(localStorage.getItem(\"saveID\"))\r\n               localStorage.setItem(\"saveID\",JSON.stringify([...data,vid]))\r\n            }else{\r\n              localStorage.setItem(\"saveID\",JSON.stringify([vid]))\r\n            }\r\n          }}\r\n        />\r\n        </div>\r\n        </>\r\n      )\r\n    }\r\n\r\n  return (\r\n    <>\r\n     {courses.length > 0 ?\r\n      <div>\r\n        {renderVideo()}\r\n        <ul className=\"collection\">\r\n          {\r\n          courses.map((item,index) => {\r\n            return <li key={item.vid} className = {counter===index ? \"collection-item myitem\" : \"collection-item\"} onClick={() => {\r\n              uid(item.vid)\r\n              utit(item.title)\r\n              setCounter(index)\r\n            }}>\r\n               {item.title}\r\n               {\r\n                 watched(item.vid) && <i class=\"tiny material-icons\">check</i>\r\n               }\r\n              \r\n             \r\n              </li>\r\n          })\r\n          }\r\n        </ul>\r\n      </div>\r\n      :\r\n      <h1>Loading</h1>\r\n        }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CourseStructure;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter,Route} from 'react-router-dom';\nimport Home from './components/Home'\nimport CourseStructure from './components/CourseStructure'\nfunction App() {\n  return (\n    <div className=\"App\">\n     <BrowserRouter>\n       <Route exact path=\"/\" component = {Home} />\n       <Route path=\"/:coursename\" component = {CourseStructure} />\n     </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}